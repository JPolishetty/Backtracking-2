class Solution {
    List<List<String>> result;
    public List<List<String>> partition(String s) {
        result = new ArrayList<>();
        if(s == null || s.length() == 0){
            return result;
        }
        recurse(s, 0, new ArrayList<>());
        return result;
    }

    private void recurse(String s, int index, List<String> path){
        //base
        if(index == s.length()){
            result.add(new ArrayList<>(path));
        }
        //logic
        for(int i = index; i < s.length(); i++){
            String sub = s.substring(index, i+1);
            if(isPalindrome(sub)){
                //logic
                path.add(sub);
                //recurse
                recurse(s, i+1, path);
                //backtrack
                path.remove(path.size()-1);
            }
        }
    }

    private boolean isPalindrome(String s){
        int l = 0;
        int r = s.length()-1;
        while(l < r){
            if(s.charAt(l) != s.charAt(r)){
                return false;
            }
            else{
                l++;
                r--;
            }
        }
        return true;
    }
}
